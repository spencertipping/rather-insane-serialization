Constructor encoding.
This is just like function encoding, but produces a function that is safe to
execute under certain conditions. The exact condition is that its first argument
is the secret key used to serialize the data structure.

There is no encoder because functions are marked as constructors retroactively.

var constructor_decode = function (s, i, key) {
  var length  = radix_code(s.substr(i + 1, 4));
  var code    = escape_decode(s.substr(i + 5, length));
  var pieces  = /^\s*\(([^\)]*)\)\s*\{([\s\S]*)\}\s*$/.exec(code);
  var formals = pieces[1].split(/\s*,\s*/);

  for (var variables = [],
           i = 0, l = formals.length; i < l; ++i)
    if (formals[i])
      variables.push(formals[i] + '=arguments[' + i + ']');

  var quoted_key      = '"' + key.replace(/["\\]/g, '\\$1') + '"';
  var early_return    = 'if (arguments[0] === ' + quoted_key + ') return;';

  var body = early_return +
             (variables.length ? 'var ' + variables.join(',') + ';' : '') +
             pieces[2];

  return [new Function(body), length + 5];
};


Instance encoding.
This is an object with a known constructor. Encoding and decoding each require
more information than usual; the decoder must verify that the constructor
function is in fact a valid constructor, and the encoder needs the index of the
constructor property in the constant table. Instances use the % prefix and are
followed by a four-byte constant table index.

var instance_encode = function (o, index) {
  return '%' + radix_encode(index, 4);
};

var instance_decode = function (s, i, constants, encoded_constants, key) {
  var index = radix_decode(s.substr(i + 1, 4));

  // Check the encoded constant table to make sure that the function at that
  // index begins with a '@' rather than a '#' (or anything else, for that
  // matter).
  if (encoded_constants[index] &&
      encoded_constants[index].charAt(0) === '@')
    return [new constants[index](key), 5];

  throw new Error('serialized value appears corrupt: referenced ' +
                  encoded_constants[index] + ' as a constructor function');
};
